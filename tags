!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(LIBFT)	Makefile	/^$(LIBFT): $/;"	t
$(NAME)	Makefile	/^$(NAME): $(OBJDIR) $(LIBFT) $(OBJS)$/;"	t
$(OBJDIR)	Makefile	/^$(OBJDIR):$/;"	t
$(OBJDIR)%.o	Makefile	/^$(OBJDIR)%.o: $(SRCDIR)%.c$/;"	t
$(OBJDIR)%.o	libft/Makefile	/^$(OBJDIR)%.o: $(SRCDIR)%.c$/;"	t
${NAME}	libft/Makefile	/^${NAME}: ${OBJDIR} ${MANOBJ} $(EXTOBJ)$/;"	t
${OBJDIR}	libft/Makefile	/^${OBJDIR}:$/;"	t
AR	libft/Makefile	/^AR = ar rc$/;"	m
BUFFER_SIZE	libft/include/get_next_line_bonus.h	/^#  define BUFFER_SIZE /;"	d
BUILTIN_H	include/builtin.h	/^# define BUILTIN_H$/;"	d
CC	Makefile	/^CC = gcc -g$/;"	m
CC	libft/Makefile	/^CC = gcc -g$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -Wextra -Werror -g$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
CMD	include/parser.h	/^	CMD,$/;"	e	enum:e_cmd_type
COMMAND_H	include/command.h	/^# define COMMAND_H$/;"	d
D_GREAT	include/lexer.h	/^	D_GREAT = 3,$/;"	e	enum:e_token_type
D_LESS	include/lexer.h	/^	D_LESS = 4,$/;"	e	enum:e_token_type
ENV_H	include/env.h	/^# define ENV_H$/;"	d
ERR_CMD	include/parser.h	/^	ERR_CMD,$/;"	e	enum:e_cmd_type
EXEC_STATUS	include/minishell.h	/^# define EXEC_STATUS /;"	d
EXTDIR	libft/Makefile	/^EXTDIR = $(OBJDIR)extra\/$/;"	m
EXTOBJ	libft/Makefile	/^EXTOBJ = $(addprefix $(EXTDIR), $(XFILES:.c=.o))$/;"	m
FD_ERROR	include/minishell.h	/^# define FD_ERROR /;"	d
FREE_H	include/free.h	/^# define FREE_H$/;"	d
FTPATH	Makefile	/^FTPATH = libft\/$/;"	m
FT_PRINTF_H	libft/include/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
GET_NEXT_LINE_BONUS_H	libft/include/get_next_line_bonus.h	/^# define GET_NEXT_LINE_BONUS_H$/;"	d
GREAT	include/lexer.h	/^	GREAT = 1,$/;"	e	enum:e_token_type
INCDIR	Makefile	/^INCDIR = include\/$/;"	m
INCDIR	libft/Makefile	/^INCDIR = include\/$/;"	m
INCPATH	Makefile	/^INCPATH = -I$(INCDIR) -I$(INDIR)$/;"	m
INCPATH	libft/Makefile	/^INCPATH = -I$(INCDIR)$/;"	m
INDIR	Makefile	/^INDIR = $(FTPATH)include\/$/;"	m
LESS	include/lexer.h	/^	LESS = 2,$/;"	e	enum:e_token_type
LEXER_H	include/lexer.h	/^#define LEXER_H$/;"	d
LEX_STATUS	include/minishell.h	/^# define LEX_STATUS /;"	d
LIBFT	Makefile	/^LIBFT = $(FTPATH)libft.a$/;"	m
LIBFT_H	libft/include/libft.h	/^# define LIBFT_H$/;"	d
LIBPATH	Makefile	/^LIBPATH = -L$(FTPATH)$/;"	m
LINK	Makefile	/^LINK = -lft -lreadline$/;"	m
MANDIR	libft/Makefile	/^MANDIR = $(OBJDIR)mandatory\/$/;"	m
MANOBJ	libft/Makefile	/^MANOBJ = $(addprefix $(MANDIR), $(SRCS:.c=.o))$/;"	m
MEM_ERROR	include/minishell.h	/^# define MEM_ERROR /;"	d
MINISHELL_H	include/minishell.h	/^# define MINISHELL_H$/;"	d
NAME	Makefile	/^NAME = minishell$/;"	m
NAME	libft/Makefile	/^NAME = libft.a$/;"	m
OBJDIR	Makefile	/^OBJDIR = bin\/$/;"	m
OBJDIR	libft/Makefile	/^OBJDIR = bin\/$/;"	m
OBJS	Makefile	/^OBJS = $(addprefix $(OBJDIR),$(SRC:.c=.o))$/;"	m
PARSER_H	include/parser.h	/^# define PARSER_H$/;"	d
PARS_STATUS	include/minishell.h	/^# define PARS_STATUS /;"	d
PIPE	include/lexer.h	/^	PIPE = 5,$/;"	e	enum:e_token_type
PIPE_CMD	include/parser.h	/^	PIPE_CMD,$/;"	e	enum:e_cmd_type
PIPE_ERROR	include/minishell.h	/^# define PIPE_ERROR /;"	d
PRINTDIR	libft/Makefile	/^PRINTDIR = $(EXTDIR)printf\/$/;"	m
PRINT_TOOLS_H	include/print_tools.h	/^# define PRINT_TOOLS_H$/;"	d
SIGNAL_H	include/signal_minishell.h	/^# define SIGNAL_H$/;"	d
SRC	Makefile	/^SRC = main.c lexer.c parser.c parser_utils.c print_tools.c \\$/;"	m
SRCDIR	Makefile	/^SRCDIR = src\/$/;"	m
SRCDIR	libft/Makefile	/^SRCDIR = src\/$/;"	m
SRCS	libft/Makefile	/^SRCS = ft_isalnum.c ft_isalpha.c ft_isascii.c ft_isdigit.c ft_strlen.c ft_isprint.c ft_toupper.c/;"	m
SYNTAX_ERROR	include/minishell.h	/^# define SYNTAX_ERROR /;"	d
WAIT_STATUS	include/minishell.h	/^# define WAIT_STATUS /;"	d
WORD	include/lexer.h	/^	WORD = 0,$/;"	e	enum:e_token_type
XFILES	libft/Makefile	/^XFILES = get_next_line_bonus.c\\$/;"	m
_SVID_SOURCE	sandbox/test.c	/^#define _SVID_SOURCE /;"	d	file:
add_process_to_global	src/global.c	/^int	add_process_to_global(void)$/;"	f	typeref:typename:int
add_var	src/env.c	/^int	add_var(t_list *env, char *var)$/;"	f	typeref:typename:int
all	Makefile	/^all: $(NAME)$/;"	t
all	libft/Makefile	/^all: ${NAME}$/;"	t
arg	include/parser.h	/^	t_list		*arg;$/;"	m	struct:s_cmd	typeref:typename:t_list *
builtin_cd	src/builtin2.c	/^int	builtin_cd(t_list *env, char **args)$/;"	f	typeref:typename:int
builtin_echo	src/builtin.c	/^void	builtin_echo(char **str)$/;"	f	typeref:typename:void
builtin_env	src/builtin.c	/^void	builtin_env(t_list *env)$/;"	f	typeref:typename:void
builtin_export	src/builtin.c	/^t_list	*builtin_export(t_list *env, char *str)$/;"	f	typeref:typename:t_list *
builtin_pwd	src/builtin.c	/^void	builtin_pwd(t_list *env)$/;"	f	typeref:typename:void
builtin_unset	src/builtin.c	/^t_list	*builtin_unset(t_list *env, char *str)$/;"	f	typeref:typename:t_list *
change_pwd	src/builtin2.c	/^int	change_pwd(t_list *env, char *path, char *oldpath)$/;"	f	typeref:typename:int
check_all_quotes	src/parser_utils.c	/^int	check_all_quotes(t_list *list)$/;"	f	typeref:typename:int
check_quotes	src/parser_utils.c	/^int	check_quotes(t_token *token)$/;"	f	typeref:typename:int
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
concat_path	src/command_utils.c	/^char	*concat_path(char *dest, char *src)$/;"	f	typeref:typename:char *
content	libft/include/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
create_cmd_list	src/parser.c	/^int	create_cmd_list(t_list *list, t_list **parsed)$/;"	f	typeref:typename:int
del_var	src/env.c	/^t_list	*del_var(t_list *env, char	*var)$/;"	f	typeref:typename:t_list *
dup_env	src/env.c	/^t_list	*dup_env(char **envp)$/;"	f	typeref:typename:t_list *
e_cmd_type	include/parser.h	/^typedef enum e_cmd_type$/;"	g
e_token_type	include/lexer.h	/^typedef enum e_token_type$/;"	g
empty_cmd	src/parser_utils.c	/^int	empty_cmd(t_cmd **cmd)$/;"	f	typeref:typename:int
exec_s_command	src/command.c	/^int	exec_s_command(t_list **aparsed, t_cmd_fd *cmd_fd, char **env, int *nb)$/;"	f	typeref:typename:int
execute_command	src/command.c	/^int	execute_command(t_list *parsed)$/;"	f	typeref:typename:int
exit_cmd	src/parser_utils.c	/^int	exit_cmd(t_list **parsed, int err_type, int flag, t_cmd *cmd)$/;"	f	typeref:typename:int
exit_exec_error	src/command.c	/^int	exit_exec_error(t_cmd_fd *cmd_fd)$/;"	f	typeref:typename:int
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
fd	include/command.h	/^	int	fd[2];$/;"	m	struct:s_cmd_fd	typeref:typename:int[2]
fill_cmd	src/parser.c	/^int fill_cmd(t_list **alist, t_cmd *cmd)$/;"	f	typeref:typename:int
fill_cmd_pipe	src/parser.c	/^int	fill_cmd_pipe(t_cmd *cmd, t_list **alst, t_cmd_type cmd_type)$/;"	f	typeref:typename:int
fill_cmd_rd	src/parser.c	/^int	fill_cmd_rd(t_list **alst, t_list *tmp, t_cmd *cmd)$/;"	f	typeref:typename:int
fill_fd_pipe	src/command.c	/^int	fill_fd_pipe(t_cmd_fd *cmd_fd, t_cmd *cmd, t_list *parsed)$/;"	f	typeref:typename:int
fill_fd_rd	src/redirection.c	/^int	fill_fd_rd(t_cmd_fd *cmd_fd, t_cmd *cmd)$/;"	f	typeref:typename:int
fill_normal_cmd	src/parser.c	/^int	fill_normal_cmd(t_cmd *cmd, t_list **alst, t_cmd_type cmd_type)$/;"	f	typeref:typename:int
find_env_var	src/env.c	/^char	*find_env_var(t_list *env, char *var)$/;"	f	typeref:typename:char *
finish_job_status	src/global.c	/^void	finish_job_status()$/;"	f	typeref:typename:void
first_command	src/main.c	/^int	first_command(int ac, char **av)$/;"	f	typeref:typename:int
free_all_except_one_str	src/command_utils.c	/^void	free_all_except_one_str(char **array, int x)$/;"	f	typeref:typename:void
free_array	src/free.c	/^void	free_array(char ***args)$/;"	f	typeref:typename:void
free_env	src/free.c	/^void	free_env(t_list	*env)$/;"	f	typeref:typename:void
free_node	src/free.c	/^void	free_node(t_list *node)$/;"	f	typeref:typename:void
free_parsed	src/free.c	/^void	free_parsed(t_list **parsed)$/;"	f	typeref:typename:void
free_ptr	libft/src/extra/get_next_line_bonus.c	/^static char	*free_ptr(char **ptr)$/;"	f	typeref:typename:char *	file:
free_ptr	src/free.c	/^char	**free_ptr(char **ptr)$/;"	f	typeref:typename:char **
free_token_list	src/free.c	/^t_list *free_token_list(t_list **list)$/;"	f	typeref:typename:t_list *
ft_atoi	libft/src/mandatory/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	libft/src/mandatory/ft_bzero.c	/^void	*ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void *
ft_calloc	libft/src/mandatory/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_createstr	libft/src/mandatory/ft_itoa.c	/^static char	*ft_createstr(int n)$/;"	f	typeref:typename:char *	file:
ft_fill	libft/src/mandatory/ft_split.c	/^static char	**ft_fill(char **tab, char *str, int x, char c)$/;"	f	typeref:typename:char **	file:
ft_free	libft/src/mandatory/ft_split.c	/^static char	**ft_free(char **tab, int x)$/;"	f	typeref:typename:char **	file:
ft_getsize	libft/src/mandatory/ft_itoa.c	/^static int	ft_getsize(int n)$/;"	f	typeref:typename:int	file:
ft_getwrd	libft/src/mandatory/ft_split.c	/^static char	*ft_getwrd(char const *str, char c)$/;"	f	typeref:typename:char *	file:
ft_init_stat	libft/src/extra/get_next_line_bonus.c	/^static char	*ft_init_stat(void)$/;"	f	typeref:typename:char *	file:
ft_is_in_set	libft/src/mandatory/ft_strtrim.c	/^static int	ft_is_in_set(const char *set, int c)$/;"	f	typeref:typename:int	file:
ft_isalnum	libft/src/mandatory/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/src/mandatory/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/src/mandatory/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/src/mandatory/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isprint	libft/src/mandatory/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_itoa	libft/src/mandatory/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/src/mandatory/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **alst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/src/mandatory/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **alst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/src/mandatory/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstdelone	libft/src/mandatory/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void *))$/;"	f	typeref:typename:void
ft_lstiter	libft/src/mandatory/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/src/mandatory/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/src/mandatory/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/src/mandatory/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/src/mandatory/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_memchr	libft/src/mandatory/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/src/mandatory/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/src/mandatory/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/src/mandatory/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/src/mandatory/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_new_back	libft/src/mandatory/ft_lstmap.c	/^static int	ft_new_back(t_list *lst, void *content)$/;"	f	typeref:typename:int	file:
ft_parser	libft/src/extra/get_next_line_bonus.c	/^static char	*ft_parser(char **stat)$/;"	f	typeref:typename:char *	file:
ft_parser	libft/src/extra/printf/ft_printf.c	/^static int	ft_parser(va_list args, char type)$/;"	f	typeref:typename:int	file:
ft_printf	libft/src/extra/printf/ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f	typeref:typename:int
ft_putadrss	libft/src/extra/printf/ft_putfct.c	/^void	ft_putadrss(unsigned long ptr)$/;"	f	typeref:typename:void
ft_putchar_fd	libft/src/mandatory/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/src/mandatory/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putinstr	libft/src/mandatory/ft_itoa.c	/^static char	*ft_putinstr(char *str, int n, int index)$/;"	f	typeref:typename:char *	file:
ft_putnbr	libft/src/extra/printf/ft_putfct.c	/^void	ft_putnbr(int nb)$/;"	f	typeref:typename:void
ft_putnbr_base	libft/src/extra/printf/ft_putfct.c	/^void	ft_putnbr_base(int nb, char *base)$/;"	f	typeref:typename:void
ft_putnbr_fd	libft/src/mandatory/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putnbr_hex_base	libft/src/extra/printf/ft_putfct.c	/^void	ft_putnbr_hex_base(unsigned long nb, char *base)$/;"	f	typeref:typename:void
ft_putstr	libft/src/extra/printf/ft_printf_utils.c	/^void	ft_putstr(char *str)$/;"	f	typeref:typename:void
ft_putstr_fd	libft/src/mandatory/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putunbr	libft/src/extra/printf/ft_putfct.c	/^void	ft_putunbr(int nb)$/;"	f	typeref:typename:void
ft_read_file	libft/src/extra/get_next_line_bonus.c	/^static int	ft_read_file(int fd, char **stat, char *buffer)$/;"	f	typeref:typename:int	file:
ft_split	libft/src/mandatory/ft_split.c	/^char	**ft_split(char const *str, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/src/mandatory/ft_strchr.c	/^char	*ft_strchr(const char *str, int c)$/;"	f	typeref:typename:char *
ft_strdup	libft/src/mandatory/ft_strdup.c	/^char	*ft_strdup(const char *str)$/;"	f	typeref:typename:char *
ft_striteri	libft/src/mandatory/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	libft/src/mandatory/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f	typeref:typename:char *
ft_strlcat	libft/src/mandatory/ft_strlcat.c	/^size_t	ft_strlcat(char *dest, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/src/mandatory/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dest, const char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/src/mandatory/ft_strlen.c	/^int	ft_strlen(const char *str)$/;"	f	typeref:typename:int
ft_strlen_prtf	libft/src/extra/printf/ft_printf_utils.c	/^int	ft_strlen_prtf(char *str)$/;"	f	typeref:typename:int
ft_strmapi	libft/src/mandatory/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/src/mandatory/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strnstr	libft/src/mandatory/ft_strnstr.c	/^char	*ft_strnstr(const char *big, const char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/src/mandatory/ft_strrchr.c	/^char	*ft_strrchr(const char *str, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/src/mandatory/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f	typeref:typename:char *
ft_substr	libft/src/mandatory/ft_substr.c	/^char	*ft_substr(char const *str, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/src/mandatory/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/src/mandatory/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_wrdcnt	libft/src/mandatory/ft_split.c	/^static int	ft_wrdcnt(char const*str, char c)$/;"	f	typeref:typename:int	file:
g_minishell	src/main.c	/^t_minishell	g_minishell;$/;"	v	typeref:typename:t_minishell
get_args	src/command.c	/^int	get_args(t_list *list, char ***argv)$/;"	f	typeref:typename:int
get_cd_path	src/builtin2.c	/^char	*get_cd_path(t_list *env, char **args)$/;"	f	typeref:typename:char *
get_next_line	libft/src/extra/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_path	src/command_utils.c	/^int	get_path(char *arg, char **str)$/;"	f	typeref:typename:int
get_var	src/env_utils.c	/^char	*get_var(char *env_i)$/;"	f	typeref:typename:char *
group_av	src/main.c	/^char	*group_av(int ac, char **av)$/;"	f	typeref:typename:char *
handle_the_stuff	sandbox/test.c	/^void handle_the_stuff(int num)$/;"	f	typeref:typename:void
handler	src/signal.c	/^void	handler(int signo, siginfo_t *info, void *context)$/;"	f	typeref:typename:void
initiate_cmd_fd	src/command.c	/^t_cmd_fd	*initiate_cmd_fd(void)$/;"	f	typeref:typename:t_cmd_fd *
is_alpha_spe	src/lexer_utils.c	/^int	is_alpha_spe(int c)$/;"	f	typeref:typename:int
is_separator	src/lexer.c	/^int	is_separator(char *str)$/;"	f	typeref:typename:int
lexer	src/lexer.c	/^t_list	*lexer(char *str)$/;"	f	typeref:typename:t_list *
libclean	Makefile	/^libclean:$/;"	t
main	sandbox/multiple_pipe_test.c	/^int main()$/;"	f	typeref:typename:int
main	sandbox/myecho.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	sandbox/test.c	/^int main (void)$/;"	f	typeref:typename:int
main	src/main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f	typeref:typename:int
new_node	src/lexer.c	/^int	new_node(t_list **token_list, char *start, int size)$/;"	f	typeref:typename:int
next	include/lexer.h	/^	struct		cmd_line	*next;$/;"	m	struct:s_cmd_line	typeref:struct:cmd_line *
next	libft/include/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
pid	include/command.h	/^	int	pid;$/;"	m	struct:s_cmd_fd	typeref:typename:int
pid	include/command.h	/^	pid_t	pid;$/;"	m	struct:s_process	typeref:typename:pid_t
print_cmd	src/print_tools.c	/^void	print_cmd(t_list *list)$/;"	f	typeref:typename:void
print_cmd_fd	src/print_tools.c	/^void	print_cmd_fd(t_cmd_fd *cmd_fd, char *str)$/;"	f	typeref:typename:void
print_error	src/print_tools.c	/^void	print_error(int ret)$/;"	f	typeref:typename:void
print_tab	src/print_tools.c	/^void	print_tab(char **tab, char *str)$/;"	f	typeref:typename:void
print_token_list	src/print_tools.c	/^void	print_token_list(t_list *list, char *str)$/;"	f	typeref:typename:void
process	include/command.h	/^	t_list	*process;$/;"	m	struct:s_minishell	typeref:typename:t_list *
rd	include/parser.h	/^	t_list		*rd;$/;"	m	struct:s_cmd	typeref:typename:t_list *
rd_d_great	src/redirection.c	/^int	rd_d_great(t_cmd_fd *cmd_fd, t_cmd **acmd)$/;"	f	typeref:typename:int
rd_great	src/redirection.c	/^int	rd_great(t_cmd_fd *cmd_fd, t_cmd **acmd)$/;"	f	typeref:typename:int
rd_less	src/redirection.c	/^int	rd_less(t_cmd_fd *cmd_fd, t_cmd **acmd)$/;"	f	typeref:typename:int
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
reset_the_terminal	sandbox/test.c	/^void reset_the_terminal(void)$/;"	f	typeref:typename:void
ret	include/command.h	/^	int	ret;$/;"	m	struct:s_cmd_fd	typeref:typename:int
s_cmd	include/parser.h	/^typedef struct s_cmd$/;"	s
s_cmd_fd	include/command.h	/^typedef struct s_cmd_fd$/;"	s
s_cmd_line	include/lexer.h	/^typedef struct s_cmd_line$/;"	s
s_global_var	include/minishell.h	/^typedef struct s_global_var$/;"	s
s_list	libft/include/libft.h	/^typedef struct s_list$/;"	s
s_minishell	include/command.h	/^typedef struct s_minishell$/;"	s
s_process	include/command.h	/^typedef struct s_process$/;"	s
s_token	include/lexer.h	/^typedef struct s_token$/;"	s
signal_management	src/signal.c	/^int	signal_management(void)$/;"	f	typeref:typename:int
size_list	src/command_utils.c	/^int	size_list(t_list *list)$/;"	f	typeref:typename:int
skip_quotes	src/lexer_utils.c	/^void	skip_quotes(char **str)$/;"	f	typeref:typename:void
skip_spaces	src/lexer_utils.c	/^void	skip_spaces(char **str)$/;"	f	typeref:typename:void
status	include/command.h	/^	int		status;$/;"	m	struct:s_minishell	typeref:typename:int
status	include/command.h	/^	int		status;$/;"	m	struct:s_process	typeref:typename:int
status	include/command.h	/^	int	status;$/;"	m	struct:s_cmd_fd	typeref:typename:int
strcmp	src/env_utils.c	/^int	strcmp(const char *s1, const char *s2)$/;"	f	typeref:typename:int
t_cmd	include/parser.h	/^}	t_cmd;$/;"	t	typeref:struct:s_cmd
t_cmd_fd	include/command.h	/^}	t_cmd_fd;$/;"	t	typeref:struct:s_cmd_fd
t_cmd_line	include/lexer.h	/^}	t_cmd_line	;$/;"	t	typeref:struct:s_cmd_line
t_cmd_type	include/parser.h	/^}	t_cmd_type;$/;"	t	typeref:enum:e_cmd_type
t_global_var	include/minishell.h	/^}	t_global_var;$/;"	t	typeref:struct:s_global_var
t_list	libft/include/libft.h	/^}	t_list;$/;"	t	typeref:struct:s_list
t_minishell	include/command.h	/^}	t_minishell;$/;"	t	typeref:struct:s_minishell
t_process	include/command.h	/^}	t_process;$/;"	t	typeref:struct:s_process
t_token	include/lexer.h	/^}	t_token;$/;"	t	typeref:struct:s_token
t_token_type	include/lexer.h	/^}	t_token_type;$/;"	t	typeref:enum:e_token_type
tab_size	src/builtin2.c	/^int	tab_size(char **tab)$/;"	f	typeref:typename:int
termios_save	sandbox/test.c	/^struct termios termios_save;$/;"	v	typeref:struct:termios
test	tester/test.sh	/^function test()$/;"	f
the_flag	sandbox/test.c	/^sig_atomic_t the_flag = 0;$/;"	v	typeref:typename:sig_atomic_t
tmp	include/command.h	/^	int	tmp;$/;"	m	struct:s_cmd_fd	typeref:typename:int
token_type	src/lexer.c	/^t_token_type token_type(char *str)$/;"	f	typeref:typename:t_token_type
trash	include/minishell.h	/^	t_list	*trash;$/;"	m	struct:s_global_var	typeref:typename:t_list *
type	include/lexer.h	/^	t_token_type	type;$/;"	m	struct:s_token	typeref:typename:t_token_type
type	include/parser.h	/^	t_cmd_type	type;$/;"	m	struct:s_cmd	typeref:typename:t_cmd_type
word	include/lexer.h	/^	char			*word;$/;"	m	struct:s_token	typeref:typename:char *
word	include/lexer.h	/^	char		*word;$/;"	m	struct:s_cmd_line	typeref:typename:char *
write_buff	libft/src/extra/printf/ft_printf.c	/^int	write_buff(int c, int marker)$/;"	f	typeref:typename:int
